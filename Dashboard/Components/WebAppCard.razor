@using Microsoft.Azure.Management.AppService.Fluent;
@using System.Text;
@using System.Net.Http;
@using System.Net.Http.Headers;

<div class="card">
    <header class="card-header">
        <p class="card-header-title" style="font-size: 20px;">
            @(IsProduction ? "Production" : App.Name)
        </p>
        <div class="card-header-icon app-state">
            <span class="@_stateClass">
                <b>@App.State</b>
            </span>
        </div>
    </header>
    <div class="card-content">
        <div class="content">
            <div class="level card-row" @onclick="_ => ToggleHostnames()">
                <div class="level-left">
                    <div class="level-item">
                        <span class="card-section-title">Hostnames</span>
                    </div>
                </div>
                <div class="level-right">
                    <div class="level-item">
                        <div class="card-section-button-circle" data-action="collapse" data-target="#chef">
                            @if (_hostnamesExpanded)
                            {
                                <span class="fa-stack fa-1x">
                                    <i class="fa fa-circle fa-stack-2x" style="color: #D8DCF7"></i>
                                    <i class="fas fa-angle-down fa-stack-1x"></i>
                                </span>
                            }
                            else
                            {
                                <span class="fa-stack fa-1x">
                                    <i class="fa fa-circle fa-stack-2x" style="color: #D8DCF7"></i>
                                    <i class="fas fa-angle-right fa-stack-1x"></i>
                                </span>
                            }
                        </div>
                    </div>
                </div>
            </div>

            @if (_hostnamesExpanded)
            {
                <p class="card-row-content">
                    @foreach (var host in App.HostNames)
                    {
                        <a href='@($"http://{host}")' target="_blank">@host</a><br />
                    }
                </p>
            }

            <div class="level card-row" @onclick="_ => ToggleWebjobs()">
                <div class="level-left">
                    <div class="level-item">
                        <span class="card-section-title">WebJobs</span>
                    </div>
                </div>
                <div class="level-right">
                    <div class="level-item">
                        <div class="card-section-button-circle" data-action="collapse" data-target="#chef">
                            @if (_webjobsExpanded)
                            {
                                <span class="fa-stack fa-1x">
                                    <i class="fa fa-circle fa-stack-2x" style="color: #D8DCF7"></i>
                                    <i class="fas fa-angle-down fa-stack-1x"></i>
                                </span>
                            }
                            else
                            {
                                <span class="fa-stack fa-1x">
                                    <i class="fa fa-circle fa-stack-2x" style="color: #D8DCF7"></i>
                                    <i class="fas fa-angle-right fa-stack-1x"></i>
                                </span>
                            }
                        </div>
                    </div>
                </div>
            </div>

            @if (_webjobsExpanded)
            {
                @if (_webjobs.Any())
                {
                    <p class="card-row-content">
                        @foreach (var job in _webjobs)
                        {
                            @if (job.name != null)
                            {
                                <a href='@(job.extra_info_url)' target="_blank">@(job.name)</a><br />
                            }
                        }
                    </p>
                }
                else
                {
                    <p>None</p>
                }
            }

            <div class="level card-row" @onclick="_ => ToggleTools()">
                <div class="level-left">
                    <div class="level-item">
                        <span class="card-section-title">Tools</span>
                    </div>
                </div>
                <div class="level-right">
                    <div class="level-item">
                        <div class="card-section-button-circle" data-action="collapse" data-target="#chef">
                            @if (_toolsExpanded)
                            {
                                <span class="fa-stack fa-1x">
                                    <i class="fa fa-circle fa-stack-2x" style="color: #D8DCF7"></i>
                                    <i class="fas fa-angle-down fa-stack-1x"></i>
                                </span>
                            }
                            else
                            {
                                <span class="fa-stack fa-1x">
                                    <i class="fa fa-circle fa-stack-2x" style="color: #D8DCF7"></i>
                                    <i class="fas fa-angle-right fa-stack-1x"></i>
                                </span>
                            }
                        </div>
                    </div>
                </div>
            </div>

            @if (_toolsExpanded)
            {
                <p class="card-row-content">
                    <a href="@_appLink" target="_blank">
                        Azure page
                    </a><br />
                    <a href="@_kuduLink" target="_blank">
                        Kudu
                    </a><br />
                    <a href="#" @onclick="o => { _appSettingsModalActive = true; _toolsDropdownActive = false; }">
                        AppSettings
                    </a><br />
                    <a href="#" @onclick="o => { _lastDeploymentModalActive = true; _toolsDropdownActive = false; }">
                        Deployments
                    </a>
                </p>
            }
        </div>
    </div>

    <footer class="card-footer">
        @if (App.State == "Stopped")
        {
            <a href="#" class="card-footer-item" @onclick="async _ =>await App.StartAsync()">
                <span class="icon app-operation-icon">
                    <i class="fas fa-play" aria-hidden="true"></i>
                </span>
            </a>
        }

        @if (App.State == "Running")
        {
            <a href="#" class="card-footer-item" @onclick="async _ => await App.StopAsync()">
                <span class="icon app-operation-icon">
                    <i class="fas fa-stop" aria-hidden="true"></i>
                </span>
            </a>

            <a href="#" class="card-footer-item" @onclick="async _ => await App.RestartAsync()">
                <span class="icon app-operation-icon">
                    <i class="fas fa-sync" aria-hidden="true"></i>
                </span>
            </a>
        }
    </footer>
</div>

<div class="modal @(_appSettingsModalActive ? "is-active" : "")">
    <div class="modal-background"></div>
    <div class="modal-content">
        <div class="card">
            <div class="card-content">
                <div class="content">
                    <div class="control">
                        <textarea rows="30" cols="400" class="textarea" readonly>@_appSettings</textarea>
                    </div>
                </div>
            </div>
            <button class="modal-close is-large" aria-label="close" @onclick="_ => _appSettingsModalActive = false"></button>
        </div>
    </div>
</div>

<div class="modal @(_lastDeploymentModalActive ? "is-active" : "")">
    <div class="modal-background"></div>
    <div class="modal-content">
        <div class="card">
            <div class="card-content">
                <div class="content">
                    <div class="control">
                        <textarea rows="30" cols="400" class="textarea" readonly>@_deployments</textarea>
                    </div>
                </div>
            </div>
            <button class="modal-close is-large" aria-label="close" @onclick="_ => _lastDeploymentModalActive = false"></button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public IWebAppBase App { get; set; }

    [Parameter]
    public string Subscription { get; set; }

    [Parameter]
    public string Domain { get; set; }

    [Parameter]
    public bool IsProduction { get; set; }

    [Parameter]
    public string ParentName { get; set; }

    private bool _hostnamesExpanded = false;
    private bool _webjobsExpanded = false;
    private bool _toolsExpanded = false;

    private string _appSettings;
    private string _deployments;
    private IEnumerable<WebJob> _webjobs;
    private string _appLink;
    private string _kuduLink;
    private string _stateClass;
    private bool _appSettingsModalActive = false;
    private bool _lastDeploymentModalActive = false;
    private bool _toolsDropdownActive = false;
    private IPublishingProfile _publishingProfile;

    private class WebJob
    {
        public WebJob() { }

        public string name { get; set; }
        public string status { get; set; }
        public string extra_info_url { get; set; }
    }

    private void ToggleHostnames()
        => _hostnamesExpanded = !_hostnamesExpanded;

    private void ToggleWebjobs()
        => _webjobsExpanded = !_webjobsExpanded;

    private void ToggleTools()
        => _toolsExpanded = !_toolsExpanded;

    protected override async Task OnParametersSetAsync()
    {
        _webjobs = new List<WebJob>();

        // Figure out color for the State
        if (App.State == "Running")
            _stateClass = "has-text-success";
        else if (App.State == "Stopped")
            _stateClass = "has-text-danger";
        else
            _stateClass = "has-text-warning";

        // Format links to the Azure app page
        _appLink = $"https://portal.azure.com/#@{Domain}/resource/subscriptions/{Subscription}/resourceGroups/{App.ResourceGroupName}/providers/Microsoft.Web/sites/";
        if (!IsProduction)
            _appLink += $"{ParentName}/slots/{App.Name}";
        else
            _appLink += App.Name;
        _appLink += "/appServices";

        _kuduLink = $"https://{(IsProduction ? App.Name : ParentName + "-" + App.Name)}.scm.azurewebsites.net";

        // JSON settings
        var jsonOptions = new JsonSerializerOptions
        {
            WriteIndented = true,
        };

        // Kudu API stuff
        _publishingProfile = await App.GetPublishingProfileAsync();

        using (var client = new HttpClient())
        {
            var authToken = Encoding.ASCII.GetBytes($"{_publishingProfile.GitUsername}:{_publishingProfile.GitPassword}");
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic",
                    Convert.ToBase64String(authToken));

            _deployments = await client.GetStringAsync($"{_kuduLink}/api/deployments");
            _webjobs = JsonSerializer.Deserialize<List<WebJob>>(await client.GetStringAsync($"{_kuduLink}/api/webjobs"));
            if (_webjobs == null)
                _webjobs = new List<WebJob>();
        }

        _appSettings = JsonSerializer.Serialize(await App.GetAppSettingsAsync(), jsonOptions);
        _appSettings += "\n\n";
        _appSettings += JsonSerializer.Serialize(await App.GetConnectionStringsAsync(), jsonOptions);

        await base.OnParametersSetAsync();
    }
}
