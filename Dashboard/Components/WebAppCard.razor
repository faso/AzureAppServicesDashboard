@using Microsoft.Azure.Management.AppService.Fluent;
@using System.Text;
@using System.Net.Http;
@using System.Net.Http.Headers;

<div class="card">
    <header class="card-header">
        <p class="card-header-title">
            @(IsProduction ? "Production" : App.Name)
        </p>
    </header>
    <div class="card-content">
        <div class="content">
            <p>State:<span class="@_stateClass"> <b>@App.State</b></span></p>
            <p>
                Hostnames:<br />
                @foreach (var host in App.HostNames)
                {
                    <a href='@($"http://{host}")' target="_blank">@host</a><br />
                }
            </p>
        </div>
    </div>
    <footer class="card-footer">
        <div class="card-footer-item dropdown @(_toolsDropdownActive ? "is-active" : "")">
            <div class="dropdown-trigger" @onclick="_ => _toolsDropdownActive = !_toolsDropdownActive">
                <div aria-haspopup="true" aria-controls="dropdown-menu">
                    <span>Tools</span>
                    <span class="tool-icon icon is-small">
                        <i class="fas fa-angle-down" aria-hidden="true"></i>
                    </span>
                </div>
            </div>
            <div class="dropdown-menu" id="dropdown-menu" role="menu" @onblur="_ => _toolsDropdownActive = false">
                <div class="dropdown-content">
                    <a href="@_appLink" target="_blank" class="dropdown-item">
                        Azure page
                    </a>
                    <a href="@_kuduLink" target="_blank" class="dropdown-item">
                        Kudu
                    </a>
                    <a href="#" @onclick="o => { _appSettingsModalActive = true; _toolsDropdownActive = false; }" class="dropdown-item">
                        AppSettings
                    </a>
                    <a href="#" @onclick="o => { _lastDeploymentModalActive = true; _toolsDropdownActive = false; }" class="dropdown-item">
                        Deployments
                    </a>
                </div>
            </div>
        </div>

        @if (App.State == "Stopped")
        {
            <a href="#" class="card-footer-item" @onclick="async _ =>await App.StartAsync()">
                <span class="icon has-text-success">
                    <i class="fas fa-play" aria-hidden="true"></i>
                </span>
            </a>
        }

        @if (App.State == "Running")
        {
            <a href="#" class="card-footer-item" @onclick="async _ => await App.StopAsync()">
                <span class="icon has-text-danger">
                    <i class="fas fa-stop" aria-hidden="true"></i>
                </span>
            </a>

            <a href="#" class="card-footer-item" @onclick="async _ => await App.RestartAsync()">
                <span class="icon has-text-warning">
                    <i class="fas fa-sync" aria-hidden="true"></i>
                </span>
            </a>
        }
    </footer>
</div>

<div class="modal @(_appSettingsModalActive ? "is-active" : "")">
    <div class="modal-background"></div>
    <div class="modal-content">
        <div class="card">
            <div class="card-content">
                <div class="content">
                    <div class="control">
                        <textarea rows="30" cols="400" class="textarea" readonly>@_appSettings</textarea>
                    </div>
                </div>
            </div>
            <button class="modal-close is-large" aria-label="close" @onclick="_ => _appSettingsModalActive = false"></button>
        </div>
    </div>
</div>

<div class="modal @(_lastDeploymentModalActive ? "is-active" : "")">
    <div class="modal-background"></div>
    <div class="modal-content">
        <div class="card">
            <div class="card-content">
                <div class="content">
                    <div class="control">
                        <textarea rows="30" cols="400" class="textarea" readonly>@_deployments</textarea>
                    </div>
                </div>
            </div>
            <button class="modal-close is-large" aria-label="close" @onclick="_ => _lastDeploymentModalActive = false"></button>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public IWebAppBase App { get; set; }

    [Parameter]
    public string Subscription { get; set; }

    [Parameter]
    public string Domain { get; set; }

    [Parameter]
    public bool IsProduction { get; set; }

    [Parameter]
    public string ParentName { get; set; }

    private string _appSettings;
    private string _deployments;
    private string _appLink;
    private string _kuduLink;
    private string _stateClass;
    private bool _appSettingsModalActive = false;
    private bool _lastDeploymentModalActive = false;
    private bool _toolsDropdownActive = false;
    private IPublishingProfile _publishingProfile;

    protected override async Task OnParametersSetAsync()
    {   // Figure out color for the State
        if (App.State == "Running")
            _stateClass = "has-text-success";
        else if (App.State == "Stopped")
            _stateClass = "has-text-danger";
        else
            _stateClass = "has-text-warning";

        // Format links to the Azure app page
        _appLink = $"https://portal.azure.com/#@{Domain}/resource/subscriptions/{Subscription}/resourceGroups/{App.ResourceGroupName}/providers/Microsoft.Web/sites/";
        if (!IsProduction)
            _appLink += $"{ParentName}/slots/{App.Name}";
        else
            _appLink += App.Name;
        _appLink += "/appServices";

        _kuduLink = $"https://{(IsProduction ? App.Name : ParentName + "-" + App.Name)}.scm.azurewebsites.net";

        // JSON settings
        var jsonOptions = new JsonSerializerOptions
        {
            WriteIndented = true,
        };

        // Kudu API stuff
        _publishingProfile = await App.GetPublishingProfileAsync();

        using (var client = new HttpClient())
        {
            var authToken = Encoding.ASCII.GetBytes($"{_publishingProfile.GitUsername}:{_publishingProfile.GitPassword}");
            client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Basic",
                    Convert.ToBase64String(authToken));

            _deployments = await client.GetStringAsync($"{_kuduLink}/api/deployments");
        }

        _appSettings = JsonSerializer.Serialize(await App.GetAppSettingsAsync(), jsonOptions);
        _appSettings += "\n\n";
        _appSettings += JsonSerializer.Serialize(await App.GetConnectionStringsAsync(), jsonOptions);

        await base.OnParametersSetAsync();
    }
}
